import{j as l,f as h,g as R,i as N}from"./index-DSOYRR-y.js";import{r as S}from"./index.m-CtIADANO.js";import{r as p}from"./index-RYns6xqu.js";const q=({className:n,isActive:a,setActive:t,...r})=>({tab:S(n,[h.base,a?h.active:h.inactive]),attrs:{...r}});function E(n){const{children:a,label:t,setActive:r=()=>{},name:s,onClick:i,isActive:d}=n,{tab:m,attrs:v}=q(n),{over:f,...g}=v,w=T=>{r(s),i&&i(T)};return l.jsxs("button",{type:"button",...g,role:"tab","aria-selected":d?"true":"false","aria-controls":d?`warp-tabpanel-${s}`:void 0,id:`warp-tab-${s}`,tabIndex:d?0:-1,className:m,onClick:w,children:[!a&&l.jsx("span",{className:h.contentUnderlined,children:t}),a&&f&&l.jsxs(l.Fragment,{children:[l.jsx("span",{className:h.icon,children:a}),l.jsx("span",{className:h.contentUnderlined,children:t})]}),a&&!f&&l.jsxs("div",{className:h.content,children:[a,t]})]})}E.__docgenInfo={description:"",methods:[],displayName:"Tab",props:{setActive:{required:!1,tsType:{name:"signature",type:"function",raw:"(name: string) => void",signature:{arguments:[{type:{name:"string"},name:"name"}],return:{name:"void"}}},description:""},className:{required:!1,tsType:{name:"string"},description:"Additional CSS class for the tab."},over:{required:!1,tsType:{name:"boolean"},description:`Set the over prop to true if you need to move icons to above the tab label
@default false`},children:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Additional content to be included in the tab (eg. icons). Content is placed above the label."},name:{required:!0,tsType:{name:"string"},description:"Tab name identifier. This value will be omitted as the argument to the Tabs onChange handler."},label:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The label of the tab item."},isActive:{required:!1,tsType:{name:"boolean"},description:"Used to set which tab should be active on mount. Defaults to the first tab if not present."},style:{required:!1,tsType:{name:"ReactCSSProperties",raw:"React.CSSProperties"},description:"Additional CSS styles for the tab."},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:"Action to be called when the component is clicked"}}};function j(n){var i,d;const{children:a,name:t,hidden:r,...s}=n;return l.jsx("div",{tabIndex:-1,...s,role:"tabpanel","aria-labelledby":`warp-tab-${t}`,id:`warp-tabpanel-${t}`,hidden:r===void 0&&typeof document=="object"?!((d=(i=document==null?void 0:document.getElementById(`warp-tab-${t}`))==null?void 0:i.classList)!=null&&d.contains(h.active)):r,children:a})}j.__docgenInfo={description:"",methods:[],displayName:"TabPanel",props:{children:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},name:{required:!0,tsType:{name:"string"},description:"Tab name identifier. Must exactly match the name identifier of a Tab."},hidden:{required:!1,tsType:{name:"boolean"},description:"Show/hide panel manually (in server-side rendering)."}}};function I(n,a=200,t=!1){let r;return function(){var s=()=>{r=null,t||n.apply(this,arguments)};let i=t&&!r;clearTimeout(r),r=setTimeout(s,a),i&&n.apply(this,arguments)}}const $=({className:n,children:a,onClick:t,active:r,...s},i,d)=>({nav:S(n,R.wrapper),div:S([R.base,N[`cols${a.filter(m=>m).length}`]]),attrs:s,updateSelectionIndicator:()=>{window.requestAnimationFrame(()=>{if(i.current&&d.current){const m=i.current.querySelector('button[role="tab"][aria-selected="true"]');if(m){const v=i.current.getBoundingClientRect().left,{left:f,width:g}=m.getBoundingClientRect();d.current.style.left=`${f-v}px`,d.current.style.width=`${g}px`}}})}}),L=n=>{const a=!!(typeof document=="object"&&(document!=null&&document.createElement)),t=p.useRef(null),r=p.useRef(null),{children:s,onChange:i}=n,{nav:d,div:m,attrs:v,updateSelectionIndicator:f}=$(n,t,r);p.useEffect(()=>{a&&A(),f();const e=I(f,100);return window.addEventListener("resize",e),()=>window.removeEventListener("resize",e)});const g=()=>{var e;if(n.active)return String(n.active);if(p.Children.count(s)>0){const o=p.Children.toArray(s),u=(o==null?void 0:o.find(c=>{var b;return(b=c==null?void 0:c.props)==null?void 0:b.isActive}))||o[0];return String(((e=u==null?void 0:u.props)==null?void 0:e.name)||"")}return""},[w,T]=p.useState(g()),A=()=>{p.Children.forEach(s,e=>{var o,u;if(typeof e=="object"){const c=document.getElementById(`warp-tabpanel-${(o=e==null?void 0:e.props)==null?void 0:o.name}`);c&&(c.hidden=((u=e==null?void 0:e.props)==null?void 0:u.name)!==w)}})},x=e=>{T(e),f(),i&&i(e)},C=e=>{var o,u;if(!e.altKey&&!e.ctrlKey&&!e.shiftKey&&["ArrowLeft","ArrowRight","Home","End"].includes(e.key)){const c=Array.from(((o=t==null?void 0:t.current)==null?void 0:o.querySelectorAll('button[role="tab"]'))??[]),b=c.findIndex(y=>y.name===w);if(b>=0){const y=(()=>{switch(e.key){case"Home":return 0;case"End":return c.length-1;case"ArrowLeft":return Math.max(0,b-1);case"ArrowRight":return Math.min(c.length-1,b+1);default:return b}})();b!==y&&((u=c[y])!=null&&u.name)&&(e.preventDefault(),x(c[y].name),c[y].focus())}}};return l.jsx("div",{...v,className:d,children:l.jsxs("div",{role:"tablist",className:m,ref:t,onKeyDown:C,children:[p.Children.map(s,e=>{var o;return e&&p.cloneElement(e,{setActive:x,isActive:((o=e==null?void 0:e.props)==null?void 0:o.name)===w})}),l.jsx("span",{"data-testid":"selection-indicator",className:R.selectionIndicator,ref:r})]})})};L.__docgenInfo={description:"",methods:[],displayName:"Tabs",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The Tabs within the container."},active:{required:!1,tsType:{name:"string"},description:`Used to set the name of the Tab that should be active on mount.
Defaults to the first tab if not present and isActive is not set on any Tab.`},className:{required:!1,tsType:{name:"string"},description:"Additional CSS class for the container"},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(name: string) => void",signature:{arguments:[{type:{name:"string"},name:"name"}],return:{name:"void"}}},description:"Handler that is called when the tab changes."},style:{required:!1,tsType:{name:"ReactCSSProperties",raw:"React.CSSProperties"},description:"Additional CSS styles for the container."}}};export{L as T,E as a,j as b};
