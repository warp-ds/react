import{j as e,l as q,g as s,h as V}from"./index-B8taxwL6.js";import{r as S}from"./index-CBqU2yxZ.js";import{a as l}from"./chunk-WFFRPTHA-DEDbbGN5.js";import{r as c}from"./index.m-CtIADANO.js";import{i as U}from"./index-ClUvnnK6.js";import{c as G}from"./chevron-down-16-CfMemYiC.js";import{a as P}from"./i18n-BdZ5C-JL.js";import{u as K}from"./useId-Cfvm1aBZ.js";import"./_commonjsHelpers-BosuxZz1.js";import"./preview-errors-B42RpLod.js";import"./index-DrFu-skq.js";const Q=JSON.parse('{"select.label.optional":"(optional)"}'),X=JSON.parse('{"select.label.optional":"(vapaaehtoinen)"}'),Z=JSON.parse('{"select.label.optional":"(valgfritt)"}'),ee=r=>{const{className:u,invalid:a,id:n,hint:i,always:p,label:C,style:j,optional:w,readOnly:m,disabled:t,...N}=r;P(Q,Z,X);const o=i?`${n}__hint`:void 0;return{attrs:{div:{style:j},label:{htmlFor:n,children:C},select:{...N,"aria-describedby":o,"aria-errormessage":a&&o?o:void 0,"aria-invalid":a,disabled:t,id:n},optional:w,help:p||a?{children:i,id:o}:null},wrapperClasses:c(s.wrapper,u),selectClasses:c({[s.base]:!0,[s.default]:!a&&!t&&!m,[s.invalid]:a,[s.disabled]:t,[s.readOnly]:m}),selectWrapperClasses:c({[s.selectWrapper]:!0}),helpTextClasses:c({[V.helpText]:!0,[V.helpTextColor]:!a,[V.helpTextColorInvalid]:a}),chevronClasses:c({[s.chevron]:!0,[s.chevronDisabled]:t})}};function ae(r,u){const a=K(r.id),{attrs:n,wrapperClasses:i,selectClasses:p,selectWrapperClasses:C,helpTextClasses:j,chevronClasses:w}=ee({...r,id:a}),{div:m,label:t,select:N,help:o,optional:A}=n;return e.jsxs("div",{className:i,...m,children:[t.children&&e.jsxs("label",{htmlFor:t.htmlFor,className:q.label,children:[t.children,A&&e.jsx("span",{className:q.optional,children:U._({id:"select.label.optional",message:"(optional)",comment:"Shown behind label when marked as optional"})})]}),e.jsxs("div",{className:C,children:[e.jsx("select",{ref:u,...N,className:p}),e.jsx("div",{className:c(w),children:e.jsx(G,{})})]}),o&&e.jsx("div",{className:j,...o})]})}const d=S.forwardRef(ae);try{d.displayName="_Select",d.__docgenInfo={description:"",displayName:"_Select",props:{autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"The `option` elements to populate the select with.",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"Additional CSS class for the container",name:"className",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string"}},invalid:{defaultValue:null,description:"Renders the field in an invalid state. Often paired together with `hint` to provide feedback about the error.",name:"invalid",required:!1,type:{name:"boolean"}},hint:{defaultValue:null,description:"The content to display as the help text.",name:"hint",required:!1,type:{name:"ReactNode"}},always:{defaultValue:null,description:"Whether to always show hint",name:"always",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!1,type:{name:"ReactNode"}},name:{defaultValue:null,description:"The name of the select element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<HTMLSelectElement, Element>) => void)"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((e: ChangeEvent<HTMLSelectElement>) => void)"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<HTMLSelectElement, Element>) => void)"}},required:{defaultValue:null,description:"Whether user input is required on the select before form submission.",name:"required",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:"Additional CSS styles for the container.",name:"style",required:!1,type:{name:"CSSProperties"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string"}},optional:{defaultValue:null,description:"Whether to show optional text",name:"optional",required:!1,type:{name:"boolean"}}}}}catch{}const me={title:"Forms/Select"},g=r=>e.jsxs(d,{label:"Berries",onChange:l("change"),onFocus:l("focus"),onBlur:l("blur"),...r,children:[e.jsx("option",{children:"Strawberries"}),e.jsx("option",{children:"Raspberries"}),e.jsx("option",{children:"Cloudberries"})]}),h=()=>e.jsx(g,{}),b=()=>e.jsx(g,{hint:"We assume this is your jam preference",always:!0}),f=()=>{const[r,u]=S.useState(""),[a,n]=S.useState(!0);S.useEffect(()=>{n(r==="Cloudberries")},[r]);const i=p=>(u(p.target.value),l("change"));return e.jsx("div",{className:"flex flex-col space-y-32",children:e.jsxs(d,{label:"Berries",invalid:!a,hint:a?"":"Wrong choice",onChange:i,onFocus:l("focus"),onBlur:l("blur"),"aria-label":"You're selection is berry nice!",children:[e.jsx("option",{value:"Strawberries",children:"Strawberries"}),e.jsx("option",{value:"Raspberries",children:"Raspberries"}),e.jsx("option",{value:"Cloudberries",children:"Cloudberries"})]})})},v=()=>e.jsx("div",{className:"flex flex-col space-y-32",children:e.jsx(g,{disabled:!0})}),x=()=>e.jsxs("div",{className:"flex flex-col space-y-32",children:[e.jsxs(d,{onChange:l("change"),onFocus:l("focus"),onBlur:l("blur"),"aria-label":"You're selection is berry nice!",children:[e.jsx("option",{children:"Strawberries"}),e.jsx("option",{children:"Raspberries"}),e.jsx("option",{children:"Cloudberries"})]}),e.jsx("label",{id:"select-label",htmlFor:"warp-aria-labelledby-example",children:"You're berry good at selecting!"}),e.jsxs(d,{id:"warp-aria-labelledby-example",onChange:l("change"),onFocus:l("focus"),onBlur:l("blur"),"aria-labelledby":"select-label",children:[e.jsx("option",{children:"Strawberries"}),e.jsx("option",{children:"Raspberries"}),e.jsx("option",{children:"Cloudberries"})]})]}),y=()=>e.jsx(g,{optional:!0});var _,F,T;h.parameters={...h.parameters,docs:{...(_=h.parameters)==null?void 0:_.docs,source:{originalSource:"() => <Select />",...(T=(F=h.parameters)==null?void 0:F.docs)==null?void 0:T.source}}};var W,R,E;b.parameters={...b.parameters,docs:{...(W=b.parameters)==null?void 0:W.docs,source:{originalSource:'() => <Select hint="We assume this is your jam preference" always />',...(E=(R=b.parameters)==null?void 0:R.docs)==null?void 0:E.source}}};var B,O,H;f.parameters={...f.parameters,docs:{...(B=f.parameters)==null?void 0:B.docs,source:{originalSource:`() => {
  const [value, setValue] = React.useState('');
  const [valid, setValid] = React.useState(true);
  React.useEffect(() => {
    setValid(value === 'Cloudberries');
  }, [value]);
  const handleOnChange = e => {
    setValue(e.target.value);
    return action('change');
  };
  return <div className="flex flex-col space-y-32">
      <WarpSelect label="Berries" invalid={!valid} hint={!valid ? 'Wrong choice' : ''} onChange={handleOnChange} onFocus={action('focus')} onBlur={action('blur')} aria-label="You're selection is berry nice!">
        <option value={'Strawberries'}>Strawberries</option>
        <option value={'Raspberries'}>Raspberries</option>
        <option value={'Cloudberries'}>Cloudberries</option>
      </WarpSelect>
    </div>;
}`,...(H=(O=f.parameters)==null?void 0:O.docs)==null?void 0:H.source}}};var L,M,I;v.parameters={...v.parameters,docs:{...(L=v.parameters)==null?void 0:L.docs,source:{originalSource:`() => <div className="flex flex-col space-y-32">
    <Select disabled />
  </div>`,...(I=(M=v.parameters)==null?void 0:M.docs)==null?void 0:I.source}}};var Y,D,$;x.parameters={...x.parameters,docs:{...(Y=x.parameters)==null?void 0:Y.docs,source:{originalSource:`() => <div className="flex flex-col space-y-32">
    <WarpSelect onChange={action('change')} onFocus={action('focus')} onBlur={action('blur')} aria-label="You're selection is berry nice!">
      <option>Strawberries</option>
      <option>Raspberries</option>
      <option>Cloudberries</option>
    </WarpSelect>

    <label id="select-label" htmlFor="warp-aria-labelledby-example">
      You're berry good at selecting!
    </label>
    <WarpSelect id="warp-aria-labelledby-example" onChange={action('change')} onFocus={action('focus')} onBlur={action('blur')} aria-labelledby="select-label">
      <option>Strawberries</option>
      <option>Raspberries</option>
      <option>Cloudberries</option>
    </WarpSelect>
  </div>`,...($=(D=x.parameters)==null?void 0:D.docs)==null?void 0:$.source}}};var J,k,z;y.parameters={...y.parameters,docs:{...(J=y.parameters)==null?void 0:J.docs,source:{originalSource:"() => <Select optional />",...(z=(k=y.parameters)==null?void 0:k.docs)==null?void 0:z.source}}};const he=["Standard","Hint","Invalid","Disabled","NoLabel","Optional"];export{v as Disabled,b as Hint,f as Invalid,x as NoLabel,y as Optional,h as Standard,he as __namedExportsOrder,me as default};
